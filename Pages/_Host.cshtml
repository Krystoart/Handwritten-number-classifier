@page "/"
@namespace VPL_course.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>VPL-course</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="VPL-course.styles.css" rel="stylesheet" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script>
    function accessDOMElement(e) {
        x=e.clientX;
        y=e.clientY;
        let svg = document.getElementById('mainSvg');
        return "" + (Number(x) - Number(svg.getBoundingClientRect().left))+ " " + (Number(y) - Number(svg.getBoundingClientRect().top)) + "";
    }
    </script>
    <script>
    function MouseIsOutOfSvg(e) {
        x=e.clientX;
        y=e.clientY;
        let svg = document.getElementById('mainSvg');
        return Number(x) < Number(svg.getBoundingClientRect().left)
        || Number(x) > Number(svg.getBoundingClientRect().right)
         || Number(y) < Number(svg.getBoundingClientRect().top)
         || Number(y) > Number(svg.getBoundingClientRect().bottom);
    }
    </script>
    <script>
    function SaveSvg() {
        var mySVG = document.getElementById('mainSvg'),      // Inline SVG element
        tgtImage = document.getElementById('mainCanvas'),      // Where to draw the result
        can      = document.createElement('canvas'), // Not shown on page
        ctx      = can.getContext('2d'),
        loader   = new Image;                        // Not shown on page

        loader.width  = can.width  = tgtImage.width;
        loader.height = can.height = tgtImage.height;
        let waitingForResult = true;
        let result = "";
        loader.onload = function(){
            ctx.drawImage( loader, 0, 0, loader.width, loader.height );
            tgtImage.src = can.toDataURL();
            result = tgtImage.src;
            waitingForResult = false;
        };
        var svgAsXML = (new XMLSerializer).serializeToString( mySVG );
        loader.src = 'data:image/svg+xml,' + encodeURIComponent( svgAsXML );
    }
    </script>
    <script>
        function getBase64()
        {
            let mainCanvas = document.getElementById('mainCanvas');
            return mainCanvas.src;
        }
    </script>
    <script>
        function ClearMainCanvas()
        {
            let mainCanvas = document.getElementById('mainCanvas');
            mainCanvas.src = "";
        }
    </script>
</body>
</html>
